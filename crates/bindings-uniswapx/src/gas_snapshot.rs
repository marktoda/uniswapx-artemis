pub use gas_snapshot::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod gas_snapshot {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldGas\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"GasMismatch\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"CHECK_ENV_VAR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"SNAP_DIR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static GASSNAPSHOT_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        128,
        84,
        96,
        1,
        96,
        255,
        25,
        145,
        130,
        22,
        129,
        23,
        144,
        146,
        85,
        96,
        12,
        128,
        84,
        144,
        145,
        22,
        144,
        145,
        23,
        144,
        85,
        52,
        128,
        21,
        97,
        0,
        45,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        144,
        145,
        82,
        96,
        17,
        129,
        82,
        112,
        46,
        102,
        111,
        114,
        103,
        101,
        45,
        115,
        110,
        97,
        112,
        115,
        104,
        111,
        116,
        115,
        47,
        96,
        120,
        27,
        96,
        32,
        130,
        1,
        82,
        97,
        0,
        95,
        144,
        97,
        1,
        49,
        86,
        91,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        130,
        82,
        96,
        20,
        129,
        82,
        127,
        70,
        79,
        82,
        71,
        69,
        95,
        83,
        78,
        65,
        80,
        83,
        72,
        79,
        84,
        95,
        67,
        72,
        69,
        67,
        75,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        32,
        130,
        1,
        82,
        144,
        81,
        99,
        126,
        209,
        236,
        125,
        96,
        224,
        27,
        129,
        82,
        115,
        113,
        9,
        112,
        158,
        207,
        169,
        26,
        128,
        98,
        111,
        243,
        152,
        157,
        104,
        246,
        127,
        91,
        29,
        209,
        45,
        145,
        99,
        126,
        209,
        236,
        125,
        145,
        97,
        0,
        199,
        145,
        144,
        96,
        4,
        1,
        97,
        2,
        199,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        146,
        80,
        80,
        80,
        128,
        21,
        97,
        1,
        0,
        87,
        80,
        96,
        64,
        128,
        81,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        144,
        146,
        82,
        97,
        0,
        253,
        145,
        129,
        1,
        144,
        97,
        2,
        225,
        86,
        91,
        96,
        1,
        91,
        97,
        1,
        20,
        87,
        96,
        12,
        128,
        84,
        97,
        255,
        0,
        25,
        22,
        144,
        85,
        97,
        4,
        61,
        86,
        91,
        96,
        12,
        128,
        84,
        145,
        21,
        21,
        97,
        1,
        0,
        2,
        97,
        255,
        0,
        25,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        97,
        4,
        61,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        3,
        128,
        130,
        82,
        96,
        128,
        130,
        1,
        144,
        146,
        82,
        96,
        0,
        145,
        129,
        96,
        32,
        1,
        91,
        96,
        96,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        144,
        3,
        144,
        129,
        97,
        1,
        73,
        87,
        144,
        80,
        80,
        144,
        80,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        5,
        129,
        82,
        96,
        32,
        1,
        100,
        54,
        181,
        178,
        52,
        185,
        96,
        217,
        27,
        129,
        82,
        80,
        129,
        96,
        0,
        129,
        81,
        129,
        16,
        97,
        1,
        145,
        87,
        97,
        1,
        145,
        97,
        3,
        25,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        129,
        144,
        82,
        80,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        2,
        129,
        82,
        96,
        32,
        1,
        97,
        2,
        215,
        96,
        244,
        27,
        129,
        82,
        80,
        129,
        96,
        1,
        129,
        81,
        129,
        16,
        97,
        1,
        202,
        87,
        97,
        1,
        202,
        97,
        3,
        25,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        129,
        144,
        82,
        80,
        129,
        129,
        96,
        2,
        129,
        81,
        129,
        16,
        97,
        1,
        233,
        87,
        97,
        1,
        233,
        97,
        3,
        25,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        1,
        82,
        96,
        64,
        81,
        99,
        137,
        22,
        4,
        103,
        96,
        224,
        27,
        129,
        82,
        115,
        113,
        9,
        112,
        158,
        207,
        169,
        26,
        128,
        98,
        111,
        243,
        152,
        157,
        104,
        246,
        127,
        91,
        29,
        209,
        45,
        144,
        99,
        137,
        22,
        4,
        103,
        144,
        97,
        2,
        43,
        144,
        132,
        144,
        96,
        4,
        1,
        97,
        3,
        47,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        74,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        2,
        114,
        145,
        144,
        129,
        1,
        144,
        97,
        3,
        145,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        2,
        146,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        2,
        122,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        2,
        179,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        2,
        119,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        2,
        218,
        96,
        32,
        131,
        1,
        132,
        97,
        2,
        155,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        2,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        1,
        129,
        132,
        82,
        128,
        133,
        81,
        128,
        131,
        82,
        96,
        64,
        134,
        1,
        145,
        80,
        96,
        64,
        129,
        96,
        5,
        27,
        135,
        1,
        1,
        146,
        80,
        131,
        135,
        1,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        3,
        132,
        87,
        96,
        63,
        25,
        136,
        134,
        3,
        1,
        132,
        82,
        97,
        3,
        114,
        133,
        131,
        81,
        97,
        2,
        155,
        86,
        91,
        148,
        80,
        146,
        133,
        1,
        146,
        144,
        133,
        1,
        144,
        96,
        1,
        1,
        97,
        3,
        86,
        86,
        91,
        80,
        146,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        3,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        97,
        3,
        186,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        132,
        1,
        145,
        80,
        132,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        97,
        3,
        224,
        87,
        97,
        3,
        224,
        97,
        3,
        3,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        4,
        8,
        87,
        97,
        4,
        8,
        97,
        3,
        3,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        135,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        4,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        4,
        50,
        131,
        96,
        32,
        131,
        1,
        96,
        32,
        136,
        1,
        97,
        2,
        119,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        147,
        128,
        97,
        4,
        76,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        56,
        9,
        44,
        76,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        155,
        39,
        170,
        46,
        20,
        97,
        0,
        152,
        87,
        128,
        99,
        248,
        204,
        191,
        71,
        20,
        97,
        0,
        212,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        20,
        129,
        82,
        96,
        32,
        1,
        127,
        70,
        79,
        82,
        71,
        69,
        95,
        83,
        78,
        65,
        80,
        83,
        72,
        79,
        84,
        95,
        67,
        72,
        69,
        67,
        75,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        143,
        145,
        144,
        97,
        0,
        241,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        17,
        129,
        82,
        96,
        32,
        1,
        127,
        46,
        102,
        111,
        114,
        103,
        101,
        45,
        115,
        110,
        97,
        112,
        115,
        104,
        111,
        116,
        115,
        47,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        12,
        84,
        97,
        0,
        225,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        143,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        30,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        1,
        2,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        4,
        109,
        178,
        195,
        182,
        229,
        183,
        196,
        35,
        9,
        57,
        215,
        83,
        88,
        89,
        110,
        49,
        178,
        133,
        204,
        231,
        243,
        179,
        142,
        44,
        6,
        19,
        167,
        82,
        191,
        37,
        65,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static GASSNAPSHOT_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        56,
        9,
        44,
        76,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        155,
        39,
        170,
        46,
        20,
        97,
        0,
        152,
        87,
        128,
        99,
        248,
        204,
        191,
        71,
        20,
        97,
        0,
        212,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        20,
        129,
        82,
        96,
        32,
        1,
        127,
        70,
        79,
        82,
        71,
        69,
        95,
        83,
        78,
        65,
        80,
        83,
        72,
        79,
        84,
        95,
        67,
        72,
        69,
        67,
        75,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        143,
        145,
        144,
        97,
        0,
        241,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        17,
        129,
        82,
        96,
        32,
        1,
        127,
        46,
        102,
        111,
        114,
        103,
        101,
        45,
        115,
        110,
        97,
        112,
        115,
        104,
        111,
        116,
        115,
        47,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        12,
        84,
        97,
        0,
        225,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        143,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        30,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        1,
        2,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        4,
        109,
        178,
        195,
        182,
        229,
        183,
        196,
        35,
        9,
        57,
        215,
        83,
        88,
        89,
        110,
        49,
        178,
        133,
        204,
        231,
        243,
        179,
        142,
        44,
        6,
        19,
        167,
        82,
        191,
        37,
        65,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static GASSNAPSHOT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct GasSnapshot<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for GasSnapshot<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for GasSnapshot<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for GasSnapshot<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for GasSnapshot<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(GasSnapshot)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> GasSnapshot<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    GASSNAPSHOT_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                GASSNAPSHOT_ABI.clone(),
                GASSNAPSHOT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `CHECK_ENV_VAR` (0x38092c4c) function
        pub fn check_env_var(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([56, 9, 44, 76], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function
        pub fn is_script(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `SNAP_DIR` (0x9b27aa2e) function
        pub fn snap_dir(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([155, 39, 170, 46], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for GasSnapshot<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `GasMismatch` with signature `GasMismatch(uint256,uint256)` and selector `0x4354d0b2`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "GasMismatch", abi = "GasMismatch(uint256,uint256)")]
    pub struct GasMismatch {
        pub old_gas: ::ethers::core::types::U256,
        pub new_gas: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `CHECK_ENV_VAR` function with signature `CHECK_ENV_VAR()` and selector `0x38092c4c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "CHECK_ENV_VAR", abi = "CHECK_ENV_VAR()")]
    pub struct CheckEnvVarCall;
    ///Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    ///Container type for all input parameters for the `SNAP_DIR` function with signature `SNAP_DIR()` and selector `0x9b27aa2e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "SNAP_DIR", abi = "SNAP_DIR()")]
    pub struct SnapDirCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum GasSnapshotCalls {
        CheckEnvVar(CheckEnvVarCall),
        IsScript(IsScriptCall),
        SnapDir(SnapDirCall),
    }
    impl ::ethers::core::abi::AbiDecode for GasSnapshotCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <CheckEnvVarCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CheckEnvVar(decoded));
            }
            if let Ok(decoded)
                = <IsScriptCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::IsScript(decoded));
            }
            if let Ok(decoded)
                = <SnapDirCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SnapDir(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for GasSnapshotCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::CheckEnvVar(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsScript(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SnapDir(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for GasSnapshotCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CheckEnvVar(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsScript(element) => ::core::fmt::Display::fmt(element, f),
                Self::SnapDir(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<CheckEnvVarCall> for GasSnapshotCalls {
        fn from(value: CheckEnvVarCall) -> Self {
            Self::CheckEnvVar(value)
        }
    }
    impl ::core::convert::From<IsScriptCall> for GasSnapshotCalls {
        fn from(value: IsScriptCall) -> Self {
            Self::IsScript(value)
        }
    }
    impl ::core::convert::From<SnapDirCall> for GasSnapshotCalls {
        fn from(value: SnapDirCall) -> Self {
            Self::SnapDir(value)
        }
    }
    ///Container type for all return fields from the `CHECK_ENV_VAR` function with signature `CHECK_ENV_VAR()` and selector `0x38092c4c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CheckEnvVarReturn(pub ::std::string::String);
    ///Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsScriptReturn(pub bool);
    ///Container type for all return fields from the `SNAP_DIR` function with signature `SNAP_DIR()` and selector `0x9b27aa2e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SnapDirReturn(pub ::std::string::String);
}
