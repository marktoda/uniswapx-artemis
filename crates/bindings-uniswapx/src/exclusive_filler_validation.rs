pub use exclusive_filler_validation::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod exclusive_filler_validation {
    pub use super::super::shared_types::*;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotExclusiveFiller\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"struct ResolvedOrder\",\"name\":\"resolvedOrder\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"struct OrderInfo\",\"name\":\"info\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract IReactor\",\"name\":\"reactor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"contract IValidationCallback\",\"name\":\"additionalValidationContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"additionalValidationData\",\"type\":\"bytes\",\"components\":[]}]},{\"internalType\":\"struct InputToken\",\"name\":\"input\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"struct OutputToken[]\",\"name\":\"outputs\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]}]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\",\"components\":[]}]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"validate\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static EXCLUSIVEFILLERVALIDATION_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        142,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        110,
        132,
        186,
        43,
        20,
        97,
        0,
        48,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        67,
        97,
        0,
        62,
        54,
        96,
        4,
        97,
        1,
        43,
        86,
        91,
        97,
        0,
        69,
        86,
        91,
        0,
        91,
        96,
        0,
        128,
        97,
        0,
        82,
        131,
        128,
        97,
        1,
        130,
        86,
        91,
        97,
        0,
        96,
        144,
        96,
        160,
        129,
        1,
        144,
        97,
        1,
        192,
        86,
        91,
        129,
        1,
        144,
        97,
        0,
        109,
        145,
        144,
        97,
        2,
        44,
        86,
        91,
        145,
        80,
        145,
        80,
        66,
        129,
        16,
        21,
        128,
        21,
        97,
        0,
        173,
        87,
        80,
        129,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        132,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        20,
        21,
        91,
        21,
        97,
        1,
        0,
        87,
        96,
        64,
        81,
        127,
        117,
        193,
        187,
        20,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        133,
        22,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        1,
        40,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        62,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        1,
        73,
        129,
        97,
        1,
        6,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        101,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        96,
        224,
        129,
        134,
        3,
        18,
        21,
        97,
        1,
        119,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        53,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        65,
        131,
        54,
        3,
        1,
        129,
        18,
        97,
        1,
        182,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        53,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        225,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        1,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        2,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        2,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        63,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        2,
        74,
        129,
        97,
        1,
        6,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        80,
        50,
        98,
        168,
        13,
        27,
        47,
        222,
        88,
        225,
        0,
        252,
        246,
        57,
        42,
        108,
        216,
        165,
        64,
        227,
        146,
        102,
        59,
        122,
        97,
        97,
        221,
        213,
        225,
        87,
        216,
        127,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static EXCLUSIVEFILLERVALIDATION_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        110,
        132,
        186,
        43,
        20,
        97,
        0,
        48,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        67,
        97,
        0,
        62,
        54,
        96,
        4,
        97,
        1,
        43,
        86,
        91,
        97,
        0,
        69,
        86,
        91,
        0,
        91,
        96,
        0,
        128,
        97,
        0,
        82,
        131,
        128,
        97,
        1,
        130,
        86,
        91,
        97,
        0,
        96,
        144,
        96,
        160,
        129,
        1,
        144,
        97,
        1,
        192,
        86,
        91,
        129,
        1,
        144,
        97,
        0,
        109,
        145,
        144,
        97,
        2,
        44,
        86,
        91,
        145,
        80,
        145,
        80,
        66,
        129,
        16,
        21,
        128,
        21,
        97,
        0,
        173,
        87,
        80,
        129,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        132,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        20,
        21,
        91,
        21,
        97,
        1,
        0,
        87,
        96,
        64,
        81,
        127,
        117,
        193,
        187,
        20,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        133,
        22,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        1,
        40,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        62,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        1,
        73,
        129,
        97,
        1,
        6,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        101,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        96,
        224,
        129,
        134,
        3,
        18,
        21,
        97,
        1,
        119,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        53,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        65,
        131,
        54,
        3,
        1,
        129,
        18,
        97,
        1,
        182,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        53,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        225,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        1,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        2,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        2,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        63,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        2,
        74,
        129,
        97,
        1,
        6,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        80,
        50,
        98,
        168,
        13,
        27,
        47,
        222,
        88,
        225,
        0,
        252,
        246,
        57,
        42,
        108,
        216,
        165,
        64,
        227,
        146,
        102,
        59,
        122,
        97,
        97,
        221,
        213,
        225,
        87,
        216,
        127,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static EXCLUSIVEFILLERVALIDATION_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct ExclusiveFillerValidation<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for ExclusiveFillerValidation<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for ExclusiveFillerValidation<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for ExclusiveFillerValidation<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for ExclusiveFillerValidation<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(ExclusiveFillerValidation))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> ExclusiveFillerValidation<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    EXCLUSIVEFILLERVALIDATION_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                EXCLUSIVEFILLERVALIDATION_ABI.clone(),
                EXCLUSIVEFILLERVALIDATION_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `validate` (0x6e84ba2b) function
        pub fn validate(
            &self,
            filler: ::ethers::core::types::Address,
            resolved_order: ResolvedOrder,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([110, 132, 186, 43], (filler, resolved_order))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for ExclusiveFillerValidation<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `NotExclusiveFiller` with signature `NotExclusiveFiller(address)` and selector `0x75c1bb14`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotExclusiveFiller", abi = "NotExclusiveFiller(address)")]
    pub struct NotExclusiveFiller {
        pub filler: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `validate` function with signature `validate(address,((address,address,uint256,uint256,address,bytes),(address,uint256,uint256),(address,uint256,address)[],bytes,bytes32))` and selector `0x6e84ba2b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "validate",
        abi = "validate(address,((address,address,uint256,uint256,address,bytes),(address,uint256,uint256),(address,uint256,address)[],bytes,bytes32))"
    )]
    pub struct ValidateCall {
        pub filler: ::ethers::core::types::Address,
        pub resolved_order: ResolvedOrder,
    }
}
