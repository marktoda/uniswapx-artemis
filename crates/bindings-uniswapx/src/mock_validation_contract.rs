pub use mock_validation_contract::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod mock_validation_contract {
    pub use super::super::shared_types::*;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"type\":\"error\",\"name\":\"MockValidationError\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setValid\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"struct ResolvedOrder\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"struct OrderInfo\",\"name\":\"info\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract IReactor\",\"name\":\"reactor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"contract IValidationCallback\",\"name\":\"additionalValidationContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"additionalValidationData\",\"type\":\"bytes\",\"components\":[]}]},{\"internalType\":\"struct InputToken\",\"name\":\"input\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"struct OutputToken[]\",\"name\":\"outputs\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]}]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\",\"components\":[]}]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"validate\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static MOCKVALIDATIONCONTRACT_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        5,
        124,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        108,
        100,
        237,
        238,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        110,
        132,
        186,
        43,
        20,
        97,
        0,
        135,
        87,
        128,
        99,
        193,
        153,
        18,
        25,
        20,
        97,
        0,
        154,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        133,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        0,
        251,
        86,
        91,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        0,
        91,
        97,
        0,
        133,
        97,
        0,
        149,
        54,
        96,
        4,
        97,
        4,
        96,
        86,
        91,
        97,
        0,
        187,
        86,
        91,
        96,
        0,
        84,
        97,
        0,
        167,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        0,
        84,
        96,
        255,
        22,
        97,
        0,
        247,
        87,
        96,
        64,
        81,
        127,
        179,
        202,
        46,
        40,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        13,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        1,
        29,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        1,
        70,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        96,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        1,
        155,
        87,
        97,
        1,
        155,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        82,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        160,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        1,
        155,
        87,
        97,
        1,
        155,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        2,
        11,
        87,
        97,
        2,
        11,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        2,
        36,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        62,
        87,
        97,
        2,
        62,
        97,
        1,
        73,
        86,
        91,
        97,
        2,
        111,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        1,
        97,
        1,
        196,
        86,
        91,
        129,
        129,
        82,
        132,
        96,
        32,
        131,
        134,
        1,
        1,
        17,
        21,
        97,
        2,
        132,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        96,
        32,
        133,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        145,
        129,
        1,
        96,
        32,
        1,
        145,
        144,
        145,
        82,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        192,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        192,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        130,
        16,
        129,
        131,
        17,
        23,
        21,
        97,
        2,
        215,
        87,
        97,
        2,
        215,
        97,
        1,
        73,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        147,
        80,
        132,
        53,
        145,
        80,
        97,
        2,
        235,
        130,
        97,
        1,
        36,
        86,
        91,
        144,
        130,
        82,
        96,
        32,
        132,
        1,
        53,
        144,
        97,
        2,
        253,
        130,
        97,
        1,
        36,
        86,
        91,
        129,
        96,
        32,
        132,
        1,
        82,
        96,
        64,
        133,
        1,
        53,
        96,
        64,
        132,
        1,
        82,
        96,
        96,
        133,
        1,
        53,
        96,
        96,
        132,
        1,
        82,
        96,
        128,
        133,
        1,
        53,
        145,
        80,
        97,
        3,
        39,
        130,
        97,
        1,
        36,
        86,
        91,
        129,
        96,
        128,
        132,
        1,
        82,
        96,
        160,
        133,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        3,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        78,
        133,
        130,
        134,
        1,
        97,
        2,
        19,
        86,
        91,
        96,
        160,
        131,
        1,
        82,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        96,
        130,
        132,
        3,
        18,
        21,
        97,
        3,
        109,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        117,
        97,
        1,
        120,
        86,
        91,
        144,
        80,
        129,
        53,
        97,
        3,
        130,
        129,
        97,
        1,
        36,
        86,
        91,
        128,
        130,
        82,
        80,
        96,
        32,
        130,
        1,
        53,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        130,
        1,
        53,
        96,
        64,
        130,
        1,
        82,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        177,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        3,
        205,
        87,
        97,
        3,
        205,
        97,
        1,
        73,
        86,
        91,
        97,
        3,
        219,
        129,
        131,
        96,
        5,
        27,
        1,
        97,
        1,
        196,
        86,
        91,
        130,
        129,
        82,
        96,
        96,
        146,
        131,
        2,
        133,
        1,
        130,
        1,
        146,
        130,
        130,
        1,
        145,
        144,
        135,
        133,
        17,
        21,
        97,
        3,
        250,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        135,
        1,
        91,
        133,
        129,
        16,
        21,
        97,
        4,
        83,
        87,
        129,
        129,
        138,
        3,
        18,
        21,
        97,
        4,
        22,
        87,
        96,
        0,
        128,
        129,
        253,
        91,
        97,
        4,
        30,
        97,
        1,
        120,
        86,
        91,
        129,
        53,
        97,
        4,
        41,
        129,
        97,
        1,
        36,
        86,
        91,
        129,
        82,
        129,
        134,
        1,
        53,
        134,
        130,
        1,
        82,
        96,
        64,
        128,
        131,
        1,
        53,
        97,
        4,
        66,
        129,
        97,
        1,
        36,
        86,
        91,
        144,
        130,
        1,
        82,
        132,
        82,
        146,
        132,
        1,
        146,
        129,
        1,
        97,
        3,
        254,
        86,
        91,
        80,
        144,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        4,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        4,
        126,
        129,
        97,
        1,
        36,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        4,
        155,
        87,
        96,
        0,
        128,
        253,
        91,
        144,
        132,
        1,
        144,
        96,
        224,
        130,
        135,
        3,
        18,
        21,
        97,
        4,
        175,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        4,
        183,
        97,
        1,
        161,
        86,
        91,
        130,
        53,
        130,
        129,
        17,
        21,
        97,
        4,
        198,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        4,
        210,
        136,
        130,
        134,
        1,
        97,
        2,
        161,
        86,
        91,
        130,
        82,
        80,
        97,
        4,
        226,
        135,
        96,
        32,
        133,
        1,
        97,
        3,
        91,
        86,
        91,
        96,
        32,
        130,
        1,
        82,
        96,
        128,
        131,
        1,
        53,
        130,
        129,
        17,
        21,
        97,
        4,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        5,
        136,
        130,
        134,
        1,
        97,
        3,
        160,
        86,
        91,
        96,
        64,
        131,
        1,
        82,
        80,
        96,
        160,
        131,
        1,
        53,
        130,
        129,
        17,
        21,
        97,
        5,
        29,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        41,
        136,
        130,
        134,
        1,
        97,
        2,
        19,
        86,
        91,
        96,
        96,
        131,
        1,
        82,
        80,
        96,
        192,
        131,
        1,
        53,
        96,
        128,
        130,
        1,
        82,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        51,
        207,
        97,
        98,
        204,
        205,
        220,
        229,
        243,
        74,
        168,
        200,
        94,
        19,
        134,
        201,
        51,
        170,
        30,
        90,
        120,
        64,
        78,
        24,
        8,
        29,
        106,
        215,
        252,
        176,
        106,
        91,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static MOCKVALIDATIONCONTRACT_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        108,
        100,
        237,
        238,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        110,
        132,
        186,
        43,
        20,
        97,
        0,
        135,
        87,
        128,
        99,
        193,
        153,
        18,
        25,
        20,
        97,
        0,
        154,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        133,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        0,
        251,
        86,
        91,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        0,
        91,
        97,
        0,
        133,
        97,
        0,
        149,
        54,
        96,
        4,
        97,
        4,
        96,
        86,
        91,
        97,
        0,
        187,
        86,
        91,
        96,
        0,
        84,
        97,
        0,
        167,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        0,
        84,
        96,
        255,
        22,
        97,
        0,
        247,
        87,
        96,
        64,
        81,
        127,
        179,
        202,
        46,
        40,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        13,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        1,
        29,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        1,
        70,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        96,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        1,
        155,
        87,
        97,
        1,
        155,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        82,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        160,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        1,
        155,
        87,
        97,
        1,
        155,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        2,
        11,
        87,
        97,
        2,
        11,
        97,
        1,
        73,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        2,
        36,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        62,
        87,
        97,
        2,
        62,
        97,
        1,
        73,
        86,
        91,
        97,
        2,
        111,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        1,
        97,
        1,
        196,
        86,
        91,
        129,
        129,
        82,
        132,
        96,
        32,
        131,
        134,
        1,
        1,
        17,
        21,
        97,
        2,
        132,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        96,
        32,
        133,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        145,
        129,
        1,
        96,
        32,
        1,
        145,
        144,
        145,
        82,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        192,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        192,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        130,
        16,
        129,
        131,
        17,
        23,
        21,
        97,
        2,
        215,
        87,
        97,
        2,
        215,
        97,
        1,
        73,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        147,
        80,
        132,
        53,
        145,
        80,
        97,
        2,
        235,
        130,
        97,
        1,
        36,
        86,
        91,
        144,
        130,
        82,
        96,
        32,
        132,
        1,
        53,
        144,
        97,
        2,
        253,
        130,
        97,
        1,
        36,
        86,
        91,
        129,
        96,
        32,
        132,
        1,
        82,
        96,
        64,
        133,
        1,
        53,
        96,
        64,
        132,
        1,
        82,
        96,
        96,
        133,
        1,
        53,
        96,
        96,
        132,
        1,
        82,
        96,
        128,
        133,
        1,
        53,
        145,
        80,
        97,
        3,
        39,
        130,
        97,
        1,
        36,
        86,
        91,
        129,
        96,
        128,
        132,
        1,
        82,
        96,
        160,
        133,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        3,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        78,
        133,
        130,
        134,
        1,
        97,
        2,
        19,
        86,
        91,
        96,
        160,
        131,
        1,
        82,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        96,
        130,
        132,
        3,
        18,
        21,
        97,
        3,
        109,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        117,
        97,
        1,
        120,
        86,
        91,
        144,
        80,
        129,
        53,
        97,
        3,
        130,
        129,
        97,
        1,
        36,
        86,
        91,
        128,
        130,
        82,
        80,
        96,
        32,
        130,
        1,
        53,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        130,
        1,
        53,
        96,
        64,
        130,
        1,
        82,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        177,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        3,
        205,
        87,
        97,
        3,
        205,
        97,
        1,
        73,
        86,
        91,
        97,
        3,
        219,
        129,
        131,
        96,
        5,
        27,
        1,
        97,
        1,
        196,
        86,
        91,
        130,
        129,
        82,
        96,
        96,
        146,
        131,
        2,
        133,
        1,
        130,
        1,
        146,
        130,
        130,
        1,
        145,
        144,
        135,
        133,
        17,
        21,
        97,
        3,
        250,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        135,
        1,
        91,
        133,
        129,
        16,
        21,
        97,
        4,
        83,
        87,
        129,
        129,
        138,
        3,
        18,
        21,
        97,
        4,
        22,
        87,
        96,
        0,
        128,
        129,
        253,
        91,
        97,
        4,
        30,
        97,
        1,
        120,
        86,
        91,
        129,
        53,
        97,
        4,
        41,
        129,
        97,
        1,
        36,
        86,
        91,
        129,
        82,
        129,
        134,
        1,
        53,
        134,
        130,
        1,
        82,
        96,
        64,
        128,
        131,
        1,
        53,
        97,
        4,
        66,
        129,
        97,
        1,
        36,
        86,
        91,
        144,
        130,
        1,
        82,
        132,
        82,
        146,
        132,
        1,
        146,
        129,
        1,
        97,
        3,
        254,
        86,
        91,
        80,
        144,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        4,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        4,
        126,
        129,
        97,
        1,
        36,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        4,
        155,
        87,
        96,
        0,
        128,
        253,
        91,
        144,
        132,
        1,
        144,
        96,
        224,
        130,
        135,
        3,
        18,
        21,
        97,
        4,
        175,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        4,
        183,
        97,
        1,
        161,
        86,
        91,
        130,
        53,
        130,
        129,
        17,
        21,
        97,
        4,
        198,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        4,
        210,
        136,
        130,
        134,
        1,
        97,
        2,
        161,
        86,
        91,
        130,
        82,
        80,
        97,
        4,
        226,
        135,
        96,
        32,
        133,
        1,
        97,
        3,
        91,
        86,
        91,
        96,
        32,
        130,
        1,
        82,
        96,
        128,
        131,
        1,
        53,
        130,
        129,
        17,
        21,
        97,
        4,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        5,
        136,
        130,
        134,
        1,
        97,
        3,
        160,
        86,
        91,
        96,
        64,
        131,
        1,
        82,
        80,
        96,
        160,
        131,
        1,
        53,
        130,
        129,
        17,
        21,
        97,
        5,
        29,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        41,
        136,
        130,
        134,
        1,
        97,
        2,
        19,
        86,
        91,
        96,
        96,
        131,
        1,
        82,
        80,
        96,
        192,
        131,
        1,
        53,
        96,
        128,
        130,
        1,
        82,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        51,
        207,
        97,
        98,
        204,
        205,
        220,
        229,
        243,
        74,
        168,
        200,
        94,
        19,
        134,
        201,
        51,
        170,
        30,
        90,
        120,
        64,
        78,
        24,
        8,
        29,
        106,
        215,
        252,
        176,
        106,
        91,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static MOCKVALIDATIONCONTRACT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct MockValidationContract<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for MockValidationContract<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for MockValidationContract<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for MockValidationContract<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for MockValidationContract<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(MockValidationContract))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> MockValidationContract<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    MOCKVALIDATIONCONTRACT_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                MOCKVALIDATIONCONTRACT_ABI.clone(),
                MOCKVALIDATIONCONTRACT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `setValid` (0x6c64edee) function
        pub fn set_valid(
            &self,
            valid: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([108, 100, 237, 238], valid)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `valid` (0xc1991219) function
        pub fn valid(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([193, 153, 18, 25], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `validate` (0x6e84ba2b) function
        pub fn validate(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ResolvedOrder,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([110, 132, 186, 43], (p0, p1))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for MockValidationContract<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `MockValidationError` with signature `MockValidationError()` and selector `0xb3ca2e28`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "MockValidationError", abi = "MockValidationError()")]
    pub struct MockValidationError;
    ///Container type for all input parameters for the `setValid` function with signature `setValid(bool)` and selector `0x6c64edee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setValid", abi = "setValid(bool)")]
    pub struct SetValidCall {
        pub valid: bool,
    }
    ///Container type for all input parameters for the `valid` function with signature `valid()` and selector `0xc1991219`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "valid", abi = "valid()")]
    pub struct ValidCall;
    ///Container type for all input parameters for the `validate` function with signature `validate(address,((address,address,uint256,uint256,address,bytes),(address,uint256,uint256),(address,uint256,address)[],bytes,bytes32))` and selector `0x6e84ba2b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "validate",
        abi = "validate(address,((address,address,uint256,uint256,address,bytes),(address,uint256,uint256),(address,uint256,address)[],bytes,bytes32))"
    )]
    pub struct ValidateCall(pub ::ethers::core::types::Address, pub ResolvedOrder);
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum MockValidationContractCalls {
        SetValid(SetValidCall),
        Valid(ValidCall),
        Validate(ValidateCall),
    }
    impl ::ethers::core::abi::AbiDecode for MockValidationContractCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <SetValidCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetValid(decoded));
            }
            if let Ok(decoded)
                = <ValidCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Valid(decoded));
            }
            if let Ok(decoded)
                = <ValidateCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Validate(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for MockValidationContractCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::SetValid(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Valid(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Validate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for MockValidationContractCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::SetValid(element) => ::core::fmt::Display::fmt(element, f),
                Self::Valid(element) => ::core::fmt::Display::fmt(element, f),
                Self::Validate(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<SetValidCall> for MockValidationContractCalls {
        fn from(value: SetValidCall) -> Self {
            Self::SetValid(value)
        }
    }
    impl ::core::convert::From<ValidCall> for MockValidationContractCalls {
        fn from(value: ValidCall) -> Self {
            Self::Valid(value)
        }
    }
    impl ::core::convert::From<ValidateCall> for MockValidationContractCalls {
        fn from(value: ValidateCall) -> Self {
            Self::Validate(value)
        }
    }
    ///Container type for all return fields from the `valid` function with signature `valid()` and selector `0xc1991219`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ValidReturn(pub bool);
}
